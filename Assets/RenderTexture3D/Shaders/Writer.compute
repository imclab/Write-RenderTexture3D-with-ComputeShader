// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel colorIsXYZ
#pragma kernel colorIsNoise
// you can use .cginc files!
#include "Assets/CGINC/ClassicNoise3D.cginc"
#include "UnityCG.cginc"

RWTexture3D<float4> _Rt3d;
float2 _TexelSize;
int _Repeat;
float _DPos;

[numthreads(8, 8, 8)]
void colorIsXYZ(uint3 id : SV_DispatchThreadID)
{
	_Rt3d[id.xyz] = float4(id.x, id.y, id.z, 0.0) * _TexelSize.x;
}

[numthreads(8, 8, 8)]
void colorIsNoise(uint3 id : SV_DispatchThreadID)
{
	float3 pos = id.xyz * _TexelSize.x;
	float noise = pnoise(pos*_Repeat, _Repeat);

	float ddx = pnoise((pos+float3(_DPos,0,0))*_Repeat, _Repeat) - noise;
	float ddy = pnoise((pos+float3(0,_DPos,0))*_Repeat, _Repeat) - noise;
	float ddz = pnoise((pos+float3(0,0,_DPos))*_Repeat, _Repeat) - noise;

	float curlX = (ddz - ddy);
	float curlY = (ddx - ddz);
	float curlZ = (ddy - ddx);

	_Rt3d[id.xyz] = float4(float3(curlX, curlY, curlZ)/_DPos, noise);
}